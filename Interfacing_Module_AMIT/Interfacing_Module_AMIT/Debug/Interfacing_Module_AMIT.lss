
Interfacing_Module_AMIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000694  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000694  00000708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e9d  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c2a  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010b5  00000000  00000000  0000350b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000538  00000000  00000000  000045c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007a4  00000000  00000000  00004af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cab  00000000  00000000  0000529c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00005f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 02 	call	0x58e	; 0x58e <main>
  8a:	0c 94 48 03 	jmp	0x690	; 0x690 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MOTORA_INIT>:
#include "DC_MOTOR.h"
#include "BTN.h"

void MOTORA_INIT(void)
{
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	64 e0       	ldi	r22, 0x04	; 4
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN5,DIO_PIN_OUTPUT);
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	65 e0       	ldi	r22, 0x05	; 5
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN6,DIO_PIN_OUTPUT);
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	66 e0       	ldi	r22, 0x06	; 6
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	
	DIO_SetPin_Direction(DIO_PORTD, DIO_PIN4, DIO_PIN_OUTPUT);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	64 e0       	ldi	r22, 0x04	; 4
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	65 e0       	ldi	r22, 0x05	; 5
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
  ce:	08 95       	ret

000000d0 <MOTORA_EN1>:
}
void MOTORA_EN1(void)
{
	
	SET_BIT(PORTD, PD4);
  d0:	94 9a       	sbi	0x12, 4	; 18
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	64 e0       	ldi	r22, 0x04	; 4
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
  e6:	08 95       	ret

000000e8 <MOTORA_DS1>:
	//DIO_SetPin_Value(DIO_PORTD,DIO_PIN4,DIO_PIN_HIGH);
	
}
void MOTORA_DS1(void)
{
	CLR_BIT(PORTD, PD4);
  e8:	94 98       	cbi	0x12, 4	; 18
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	64 e0       	ldi	r22, 0x04	; 4
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
  fe:	08 95       	ret

00000100 <MOTORB_INIT>:
}

void MOTORB_INIT(void)
{
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	64 e0       	ldi	r22, 0x04	; 4
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN5,DIO_PIN_OUTPUT);
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	65 e0       	ldi	r22, 0x05	; 5
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTC,DIO_PIN6,DIO_PIN_OUTPUT);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	66 e0       	ldi	r22, 0x06	; 6
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	
	DIO_SetPin_Direction(DIO_PORTD, DIO_PIN4, DIO_PIN_OUTPUT);
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	64 e0       	ldi	r22, 0x04	; 4
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
	DIO_SetPin_Direction(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	65 e0       	ldi	r22, 0x05	; 5
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 13c:	08 95       	ret

0000013e <MOTORB_EN2>:
}

void MOTORB_EN2(void)
{
	SET_BIT(PORTD, PD5);
 13e:	95 9a       	sbi	0x12, 5	; 18
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	65 e0       	ldi	r22, 0x05	; 5
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	66 e0       	ldi	r22, 0x06	; 6
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 154:	08 95       	ret

00000156 <MOTORB_DS2>:

}
void MOTORB_DS2(void)
{
	CLR_BIT(PORTD, PD5);
 156:	95 98       	cbi	0x12, 5	; 18
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	65 e0       	ldi	r22, 0x05	; 5
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	66 e0       	ldi	r22, 0x06	; 6
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 16c:	08 95       	ret

0000016e <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
 16e:	44 23       	and	r20, r20
 170:	19 f0       	breq	.+6      	; 0x178 <DIO_SetPin_Direction+0xa>
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	c9 f1       	breq	.+114    	; 0x1e8 <DIO_SetPin_Direction+0x7a>
 176:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	91 f0       	breq	.+36     	; 0x1a0 <DIO_SetPin_Direction+0x32>
 17c:	28 f0       	brcs	.+10     	; 0x188 <DIO_SetPin_Direction+0x1a>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	d9 f0       	breq	.+54     	; 0x1b8 <DIO_SetPin_Direction+0x4a>
 182:	83 30       	cpi	r24, 0x03	; 3
 184:	29 f1       	breq	.+74     	; 0x1d0 <DIO_SetPin_Direction+0x62>
 186:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
 188:	2a b3       	in	r18, 0x1a	; 26
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPin_Direction+0x26>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPin_Direction+0x22>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	8a bb       	out	0x1a, r24	; 26
			break;
 19e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
 1a0:	27 b3       	in	r18, 0x17	; 23
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_SetPin_Direction+0x3e>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_SetPin_Direction+0x3a>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	87 bb       	out	0x17, r24	; 23
			break;
 1b6:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
 1b8:	24 b3       	in	r18, 0x14	; 20
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SetPin_Direction+0x56>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SetPin_Direction+0x52>
 1c8:	80 95       	com	r24
 1ca:	82 23       	and	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
			break;
 1ce:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
 1d0:	21 b3       	in	r18, 0x11	; 17
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPin_Direction+0x6e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPin_Direction+0x6a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	81 bb       	out	0x11, r24	; 17
			break;
 1e6:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	89 f0       	breq	.+34     	; 0x20e <DIO_SetPin_Direction+0xa0>
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <DIO_SetPin_Direction+0x8a>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	c9 f0       	breq	.+50     	; 0x224 <DIO_SetPin_Direction+0xb6>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	11 f1       	breq	.+68     	; 0x23a <DIO_SetPin_Direction+0xcc>
 1f6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 1f8:	2a b3       	in	r18, 0x1a	; 26
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_SetPin_Direction+0x96>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_SetPin_Direction+0x92>
 208:	82 2b       	or	r24, r18
 20a:	8a bb       	out	0x1a, r24	; 26
			break;
 20c:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 20e:	27 b3       	in	r18, 0x17	; 23
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPin_Direction+0xac>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPin_Direction+0xa8>
 21e:	82 2b       	or	r24, r18
 220:	87 bb       	out	0x17, r24	; 23
			break;
 222:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 224:	24 b3       	in	r18, 0x14	; 20
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SetPin_Direction+0xc2>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_SetPin_Direction+0xbe>
 234:	82 2b       	or	r24, r18
 236:	84 bb       	out	0x14, r24	; 20
			break;
 238:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 23a:	21 b3       	in	r18, 0x11	; 17
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_SetPin_Direction+0xd8>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_SetPin_Direction+0xd4>
 24a:	82 2b       	or	r24, r18
 24c:	81 bb       	out	0x11, r24	; 17
 24e:	08 95       	ret

00000250 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)/*Output Mode*/
{
	switch(value)
 250:	44 23       	and	r20, r20
 252:	19 f0       	breq	.+6      	; 0x25a <DIO_SetPin_Value+0xa>
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	c9 f1       	breq	.+114    	; 0x2ca <DIO_SetPin_Value+0x7a>
 258:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 f0       	breq	.+36     	; 0x282 <DIO_SetPin_Value+0x32>
 25e:	28 f0       	brcs	.+10     	; 0x26a <DIO_SetPin_Value+0x1a>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	d9 f0       	breq	.+54     	; 0x29a <DIO_SetPin_Value+0x4a>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	29 f1       	breq	.+74     	; 0x2b2 <DIO_SetPin_Value+0x62>
 268:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 26a:	2b b3       	in	r18, 0x1b	; 27
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPin_Value+0x26>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPin_Value+0x22>
 27a:	80 95       	com	r24
 27c:	82 23       	and	r24, r18
 27e:	8b bb       	out	0x1b, r24	; 27
			break;
 280:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 282:	28 b3       	in	r18, 0x18	; 24
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_SetPin_Value+0x3e>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_SetPin_Value+0x3a>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	88 bb       	out	0x18, r24	; 24
			break;
 298:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 29a:	25 b3       	in	r18, 0x15	; 21
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_SetPin_Value+0x56>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_SetPin_Value+0x52>
 2aa:	80 95       	com	r24
 2ac:	82 23       	and	r24, r18
 2ae:	85 bb       	out	0x15, r24	; 21
			break;
 2b0:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 2b2:	22 b3       	in	r18, 0x12	; 18
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_SetPin_Value+0x6e>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_SetPin_Value+0x6a>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	82 bb       	out	0x12, r24	; 18
			break;
 2c8:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	89 f0       	breq	.+34     	; 0x2f0 <DIO_SetPin_Value+0xa0>
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_SetPin_Value+0x8a>
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	c9 f0       	breq	.+50     	; 0x306 <DIO_SetPin_Value+0xb6>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	11 f1       	breq	.+68     	; 0x31c <DIO_SetPin_Value+0xcc>
 2d8:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 2da:	2b b3       	in	r18, 0x1b	; 27
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_SetPin_Value+0x96>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_SetPin_Value+0x92>
 2ea:	82 2b       	or	r24, r18
 2ec:	8b bb       	out	0x1b, r24	; 27
			break;
 2ee:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 2f0:	28 b3       	in	r18, 0x18	; 24
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_SetPin_Value+0xac>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_SetPin_Value+0xa8>
 300:	82 2b       	or	r24, r18
 302:	88 bb       	out	0x18, r24	; 24
			break;
 304:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 306:	25 b3       	in	r18, 0x15	; 21
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_SetPin_Value+0xc2>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_SetPin_Value+0xbe>
 316:	82 2b       	or	r24, r18
 318:	85 bb       	out	0x15, r24	; 21
			break;
 31a:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 31c:	22 b3       	in	r18, 0x12	; 18
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_SetPin_Value+0xd8>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_SetPin_Value+0xd4>
 32c:	82 2b       	or	r24, r18
 32e:	82 bb       	out	0x12, r24	; 18
 330:	08 95       	ret

00000332 <__vector_1>:
	//SET_BIT(SREG, 7);
	LED0_Init();
	
}
ISR(INT0_vect)
{
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	2f 93       	push	r18
 33e:	3f 93       	push	r19
 340:	4f 93       	push	r20
 342:	5f 93       	push	r21
 344:	6f 93       	push	r22
 346:	7f 93       	push	r23
 348:	8f 93       	push	r24
 34a:	9f 93       	push	r25
 34c:	af 93       	push	r26
 34e:	bf 93       	push	r27
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	LED0_OFF();
 354:	0e 94 bf 02 	call	0x57e	; 0x57e <LED0_OFF>
	Buzzer_OFF();
 358:	0e 94 c1 01 	call	0x382	; 0x382 <Buzzer_OFF>
	TIMER0_STOP();
 35c:	0e 94 1e 03 	call	0x63c	; 0x63c <TIMER0_STOP>
}
 360:	ff 91       	pop	r31
 362:	ef 91       	pop	r30
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <Buzzer_OFF>:
{
	SET_BIT(PORTA,3);
}
void Buzzer_OFF(void)
{
	CLR_BIT(PORTA,3);
 382:	db 98       	cbi	0x1b, 3	; 27
 384:	08 95       	ret

00000386 <LCD_Write_Command>:
void LCD_Write_Number(Uint32t Number)
{
	Uint8t num[10];
	ltoa(Number, (Uint8t*)num,10);
	LCD_Write_String(num);
}
 386:	cf 93       	push	r28
 388:	c8 2f       	mov	r28, r24
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 3a8:	8b b3       	in	r24, 0x1b	; 27
 3aa:	9c 2f       	mov	r25, r28
 3ac:	90 7f       	andi	r25, 0xF0	; 240
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	89 2b       	or	r24, r25
 3b2:	8b bb       	out	0x1b, r24	; 27
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	63 e0       	ldi	r22, 0x03	; 3
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 3be:	8f e9       	ldi	r24, 0x9F	; 159
 3c0:	9f e0       	ldi	r25, 0x0F	; 15
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <LCD_Write_Command+0x3c>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <LCD_Write_Command+0x42>
 3c8:	00 00       	nop
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	63 e0       	ldi	r22, 0x03	; 3
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 3d4:	2b b3       	in	r18, 0x1b	; 27
 3d6:	30 e1       	ldi	r19, 0x10	; 16
 3d8:	c3 9f       	mul	r28, r19
 3da:	c0 01       	movw	r24, r0
 3dc:	11 24       	eor	r1, r1
 3de:	92 2f       	mov	r25, r18
 3e0:	9f 70       	andi	r25, 0x0F	; 15
 3e2:	89 2b       	or	r24, r25
 3e4:	8b bb       	out	0x1b, r24	; 27
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 3f0:	8f e9       	ldi	r24, 0x9F	; 159
 3f2:	9f e0       	ldi	r25, 0x0F	; 15
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_Write_Command+0x6e>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_Write_Command+0x74>
 3fa:	00 00       	nop
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 406:	8f e1       	ldi	r24, 0x1F	; 31
 408:	9e e4       	ldi	r25, 0x4E	; 78
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <LCD_Init>:
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	64 e0       	ldi	r22, 0x04	; 4
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	65 e0       	ldi	r22, 0x05	; 5
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	66 e0       	ldi	r22, 0x06	; 6
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	67 e0       	ldi	r22, 0x07	; 7
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	81 ee       	ldi	r24, 0xE1	; 225
 460:	94 e0       	ldi	r25, 0x04	; 4
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <LCD_Init+0x4c>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_Init+0x56>
 46c:	00 00       	nop
 46e:	82 e0       	ldi	r24, 0x02	; 2
 470:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 474:	83 e3       	ldi	r24, 0x33	; 51
 476:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 47a:	82 e3       	ldi	r24, 0x32	; 50
 47c:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 480:	88 e2       	ldi	r24, 0x28	; 40
 482:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 492:	86 e0       	ldi	r24, 0x06	; 6
 494:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 498:	08 95       	ret

0000049a <LCD_Write_Data>:
 49a:	cf 93       	push	r28
 49c:	c8 2f       	mov	r28, r24
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	62 e0       	ldi	r22, 0x02	; 2
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	63 e0       	ldi	r22, 0x03	; 3
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 4bc:	8b b3       	in	r24, 0x1b	; 27
 4be:	9c 2f       	mov	r25, r28
 4c0:	90 7f       	andi	r25, 0xF0	; 240
 4c2:	8f 70       	andi	r24, 0x0F	; 15
 4c4:	89 2b       	or	r24, r25
 4c6:	8b bb       	out	0x1b, r24	; 27
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	63 e0       	ldi	r22, 0x03	; 3
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 4d2:	8f e9       	ldi	r24, 0x9F	; 159
 4d4:	9f e0       	ldi	r25, 0x0F	; 15
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <LCD_Write_Data+0x3c>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <LCD_Write_Data+0x42>
 4dc:	00 00       	nop
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	63 e0       	ldi	r22, 0x03	; 3
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 4e8:	2b b3       	in	r18, 0x1b	; 27
 4ea:	30 e1       	ldi	r19, 0x10	; 16
 4ec:	c3 9f       	mul	r28, r19
 4ee:	c0 01       	movw	r24, r0
 4f0:	11 24       	eor	r1, r1
 4f2:	92 2f       	mov	r25, r18
 4f4:	9f 70       	andi	r25, 0x0F	; 15
 4f6:	89 2b       	or	r24, r25
 4f8:	8b bb       	out	0x1b, r24	; 27
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	63 e0       	ldi	r22, 0x03	; 3
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 504:	8f e9       	ldi	r24, 0x9F	; 159
 506:	9f e0       	ldi	r25, 0x0F	; 15
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <LCD_Write_Data+0x6e>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <LCD_Write_Data+0x74>
 50e:	00 00       	nop
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	63 e0       	ldi	r22, 0x03	; 3
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPin_Value>
 51a:	8f e1       	ldi	r24, 0x1F	; 31
 51c:	9e e4       	ldi	r25, 0x4E	; 78
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCD_Write_Data+0x84>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_Write_Data+0x8a>
 524:	00 00       	nop
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <LCD_Clear>:
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 530:	08 95       	ret

00000532 <LCD_Write_String>:
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	ec 01       	movw	r28, r24
 538:	88 81       	ld	r24, Y
 53a:	88 23       	and	r24, r24
 53c:	61 f0       	breq	.+24     	; 0x556 <LCD_Write_String+0x24>
 53e:	8f e9       	ldi	r24, 0x9F	; 159
 540:	9f e0       	ldi	r25, 0x0F	; 15
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	f1 f7       	brne	.-4      	; 0x542 <LCD_Write_String+0x10>
 546:	00 c0       	rjmp	.+0      	; 0x548 <LCD_Write_String+0x16>
 548:	00 00       	nop
 54a:	89 91       	ld	r24, Y+
 54c:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Write_Data>
 550:	88 81       	ld	r24, Y
 552:	81 11       	cpse	r24, r1
 554:	f4 cf       	rjmp	.-24     	; 0x53e <LCD_Write_String+0xc>
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <LCD_GOTO_POSITION>:

void LCD_GOTO_POSITION(Uint8t ROW , Uint8t COL)        // SELECT POSITION
{
	Uint8t Address;

	if(ROW<2 && COL<16)
 55c:	82 30       	cpi	r24, 0x02	; 2
 55e:	50 f4       	brcc	.+20     	; 0x574 <LCD_GOTO_POSITION+0x18>
 560:	60 31       	cpi	r22, 0x10	; 16
 562:	40 f4       	brcc	.+16     	; 0x574 <LCD_GOTO_POSITION+0x18>
	{
		Address=(ROW * 0X40) + COL;
 564:	90 e4       	ldi	r25, 0x40	; 64
 566:	89 9f       	mul	r24, r25
 568:	60 0d       	add	r22, r0
 56a:	11 24       	eor	r1, r1
 56c:	86 2f       	mov	r24, r22
		Address=SET_BIT(Address,7);
		LCD_Write_Command(Address);
 56e:	80 68       	ori	r24, 0x80	; 128
 570:	0e 94 c3 01 	call	0x386	; 0x386 <LCD_Write_Command>
 574:	08 95       	ret

00000576 <LED0_Init>:
void LED0_OFF(void){
	CLR_BIT(PORTC,2);
}
void LED0_Toggle(void)
{
	TGL_BIT(PORTC,2);
 576:	a2 9a       	sbi	0x14, 2	; 20
 578:	08 95       	ret

0000057a <LED0_ON>:
 57a:	aa 9a       	sbi	0x15, 2	; 21
 57c:	08 95       	ret

0000057e <LED0_OFF>:
 57e:	aa 98       	cbi	0x15, 2	; 21
 580:	08 95       	ret

00000582 <LED1_Init>:
}
//LED 1
void LED1_Init(void){
	SET_BIT(DDRC,7);
 582:	a7 9a       	sbi	0x14, 7	; 20
 584:	08 95       	ret

00000586 <LED1_ON>:
}
void LED1_ON(void){
	SET_BIT(PORTC,7);
 586:	af 9a       	sbi	0x15, 7	; 21
 588:	08 95       	ret

0000058a <LED1_OFF>:
	
}
void LED1_OFF(void){
	CLR_BIT(PORTC,7);
 58a:	af 98       	cbi	0x15, 7	; 21
 58c:	08 95       	ret

0000058e <main>:
#include "LED.h"


int main(void)
{
	LED0_Init();
 58e:	0e 94 bb 02 	call	0x576	; 0x576 <LED0_Init>
	LED1_Init();
 592:	0e 94 c1 02 	call	0x582	; 0x582 <LED1_Init>
	LCD_Init();
 596:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_Init>
	LCD_Clear();
 59a:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_Clear>
	LCD_Write_String("Hello!");
 59e:	80 e6       	ldi	r24, 0x60	; 96
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 99 02 	call	0x532	; 0x532 <LCD_Write_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a6:	2f ef       	ldi	r18, 0xFF	; 255
 5a8:	87 ea       	ldi	r24, 0xA7	; 167
 5aa:	91 e6       	ldi	r25, 0x61	; 97
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x1e>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x28>
 5b6:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
 5b8:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_Clear>
	
	MOTORA_INIT();
 5bc:	0e 94 49 00 	call	0x92	; 0x92 <MOTORA_INIT>
	MOTORB_INIT();
 5c0:	0e 94 80 00 	call	0x100	; 0x100 <MOTORB_INIT>
	
	Uint8t x;
	Uint8t arr[10];
	UART_INIT();
 5c4:	0e 94 1f 03 	call	0x63e	; 0x63e <UART_INIT>

	
	while(1)
	{
		x = UART_Receive_Byte();
 5c8:	0e 94 44 03 	call	0x688	; 0x688 <UART_Receive_Byte>
 5cc:	c8 2f       	mov	r28, r24
		
		LCD_GOTO_POSITION(1 ,1);
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 ae 02 	call	0x55c	; 0x55c <LCD_GOTO_POSITION>
		LCD_Write_Data(x);
 5d6:	8c 2f       	mov	r24, r28
 5d8:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_Write_Data>
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	81 ee       	ldi	r24, 0xE1	; 225
 5e0:	94 e0       	ldi	r25, 0x04	; 4
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0x54>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <main+0x5e>
 5ec:	00 00       	nop
		_delay_ms(100);
		
		if (x == '1')
 5ee:	c1 33       	cpi	r28, 0x31	; 49
 5f0:	29 f4       	brne	.+10     	; 0x5fc <main+0x6e>
		{
			
			MOTORA_EN1();
 5f2:	0e 94 68 00 	call	0xd0	; 0xd0 <MOTORA_EN1>
			LED1_ON();
 5f6:	0e 94 c3 02 	call	0x586	; 0x586 <LED1_ON>
 5fa:	e6 cf       	rjmp	.-52     	; 0x5c8 <main+0x3a>
		}
		else if (x == '0')
 5fc:	c0 33       	cpi	r28, 0x30	; 48
 5fe:	29 f4       	brne	.+10     	; 0x60a <main+0x7c>
		{
			MOTORA_DS1();
 600:	0e 94 74 00 	call	0xe8	; 0xe8 <MOTORA_DS1>
			LED1_OFF();
 604:	0e 94 c5 02 	call	0x58a	; 0x58a <LED1_OFF>
 608:	df cf       	rjmp	.-66     	; 0x5c8 <main+0x3a>
		}
		else if (x == '2')
 60a:	c2 33       	cpi	r28, 0x32	; 50
 60c:	29 f4       	brne	.+10     	; 0x618 <main+0x8a>
		{
			MOTORB_EN2();
 60e:	0e 94 9f 00 	call	0x13e	; 0x13e <MOTORB_EN2>
			LED0_ON();
 612:	0e 94 bd 02 	call	0x57a	; 0x57a <LED0_ON>
 616:	d8 cf       	rjmp	.-80     	; 0x5c8 <main+0x3a>
		}
		else if (x == '3')
 618:	c3 33       	cpi	r28, 0x33	; 51
 61a:	29 f4       	brne	.+10     	; 0x626 <main+0x98>
		{
			MOTORB_DS2();
 61c:	0e 94 ab 00 	call	0x156	; 0x156 <MOTORB_DS2>
			LED0_OFF();
 620:	0e 94 bf 02 	call	0x57e	; 0x57e <LED0_OFF>
 624:	d1 cf       	rjmp	.-94     	; 0x5c8 <main+0x3a>
		}
		else if (x == '4')
 626:	c4 33       	cpi	r28, 0x34	; 52
 628:	79 f6       	brne	.-98     	; 0x5c8 <main+0x3a>
		{
			MOTORA_DS1();
 62a:	0e 94 74 00 	call	0xe8	; 0xe8 <MOTORA_DS1>
			MOTORB_DS2();
 62e:	0e 94 ab 00 	call	0x156	; 0x156 <MOTORB_DS2>
			LED0_OFF();
 632:	0e 94 bf 02 	call	0x57e	; 0x57e <LED0_OFF>
			LED1_OFF();
 636:	0e 94 c5 02 	call	0x58a	; 0x58a <LED1_OFF>
 63a:	c6 cf       	rjmp	.-116    	; 0x5c8 <main+0x3a>

0000063c <TIMER0_STOP>:
	#if TIMER0_PRESCALAR == CLK_1024
	SET_BIT(TCCR0, CS02); CLR_BIT(TCCR0, CS01); SET_BIT(TCCR0, CS00);
    #endif
}
void TIMER0_STOP(void)
{
 63c:	08 95       	ret

0000063e <UART_INIT>:
void UART_Transmit(Uint8t Data)
{
	
	//DIO_SetPin_Value(DIO_PORTD,DIO_PIN1,DIO_PIN_LOW);
	while( !( UCSRA & (1<<UDRE)));         //transmit buffer (UDR) is ready to receive new data. If UDRE is one
	UDR = Data;
 63e:	83 e3       	ldi	r24, 0x33	; 51
 640:	89 b9       	out	0x09, r24	; 9
 642:	10 bc       	out	0x20, r1	; 32
 644:	53 9a       	sbi	0x0a, 3	; 10
 646:	54 9a       	sbi	0x0a, 4	; 10
 648:	80 b5       	in	r24, 0x20	; 32
 64a:	80 68       	ori	r24, 0x80	; 128
 64c:	80 bd       	out	0x20, r24	; 32
 64e:	80 b5       	in	r24, 0x20	; 32
 650:	82 60       	ori	r24, 0x02	; 2
 652:	80 bd       	out	0x20, r24	; 32
 654:	80 b5       	in	r24, 0x20	; 32
 656:	84 60       	ori	r24, 0x04	; 4
 658:	80 bd       	out	0x20, r24	; 32
 65a:	52 98       	cbi	0x0a, 2	; 10
 65c:	80 b5       	in	r24, 0x20	; 32
 65e:	8f 7e       	andi	r24, 0xEF	; 239
 660:	80 bd       	out	0x20, r24	; 32
 662:	80 b5       	in	r24, 0x20	; 32
 664:	8f 7d       	andi	r24, 0xDF	; 223
 666:	80 bd       	out	0x20, r24	; 32
 668:	80 b5       	in	r24, 0x20	; 32
 66a:	8f 7b       	andi	r24, 0xBF	; 191
 66c:	80 bd       	out	0x20, r24	; 32
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 678:	41 e0       	ldi	r20, 0x01	; 1
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	83 e0       	ldi	r24, 0x03	; 3
 67e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_SetPin_Direction>
 682:	88 98       	cbi	0x11, 0	; 17
 684:	89 9a       	sbi	0x11, 1	; 17
 686:	08 95       	ret

00000688 <UART_Receive_Byte>:
	//while(GET_BIT(UCSRA, TXC) !=1);     //Pooling mode	
}
Uint8t UART_Receive_Byte(void)
{
	// Wait for byte to be received
	while(!(UCSRA & (1<<RXC)) );
 688:	5f 9b       	sbis	0x0b, 7	; 11
 68a:	fe cf       	rjmp	.-4      	; 0x688 <UART_Receive_Byte>
	// Return received data
	return UDR;
 68c:	8c b1       	in	r24, 0x0c	; 12
}
 68e:	08 95       	ret

00000690 <_exit>:
 690:	f8 94       	cli

00000692 <__stop_program>:
 692:	ff cf       	rjmp	.-2      	; 0x692 <__stop_program>
