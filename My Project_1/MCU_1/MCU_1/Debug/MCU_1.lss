
MCU_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001341  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b00  00000000  00000000  000018d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cf6  00000000  00000000  000023d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072f  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000934  00000000  00000000  00003caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  000045e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  8a:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Direction+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Direction+0x7a>
  9a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Direction+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Direction+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Direction+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Direction+0x62>
  aa:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Direction+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Direction+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
			break;
  c2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Direction+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
			break;
  f2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Direction+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Direction+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
			break;
 10a:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Direction+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Direction+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Direction+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Direction+0xcc>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
			break;
 130:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
			break;
 146:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
			break;
 15c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Direction+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Direction+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <__vector_1>:
	//SET_BIT(SREG, 7);
	LED0_Init();
	
}
ISR(INT0_vect)
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	LED0_OFF();
 196:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LED0_OFF>
	Buzzer_OFF();
 19a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <Buzzer_OFF>
	TIMER0_STOP();
 19e:	0e 94 03 01 	call	0x206	; 0x206 <TIMER0_STOP>
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <Buzzer_OFF>:
{
	SET_BIT(PORTA,3);
}
void Buzzer_OFF(void)
{
	CLR_BIT(PORTA,3);
 1c4:	db 98       	cbi	0x1b, 3	; 27
 1c6:	08 95       	ret

000001c8 <LED0_OFF>:
void LED0_ON(void){
	SET_BIT(PORTC,2);
	
}
void LED0_OFF(void){
	CLR_BIT(PORTC,2);
 1c8:	aa 98       	cbi	0x15, 2	; 21
 1ca:	08 95       	ret

000001cc <main>:
{
	
	
	Uint8t y;
	Uint8t arr[10];
	UART_INIT();
 1cc:	0e 94 04 01 	call	0x208	; 0x208 <UART_INIT>
	SPI_InitMaster();
 1d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SPI_InitMaster>
   
	while(1)
	{
		
		y = UART_Receive_Byte();
 1d4:	0e 94 29 01 	call	0x252	; 0x252 <UART_Receive_Byte>
		SPI_SendByte(y);
 1d8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <SPI_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9c e9       	ldi	r25, 0x9C	; 156
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0x14>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x1a>
 1e6:	00 00       	nop
 1e8:	f5 cf       	rjmp	.-22     	; 0x1d4 <main+0x8>

000001ea <SPI_InitMaster>:
}

void SPI_InitSlave()
{
	DDRB |= (1<<PB6);
	SPCR |= (1<<SPE);
 1ea:	87 b3       	in	r24, 0x17	; 23
 1ec:	80 6b       	ori	r24, 0xB0	; 176
 1ee:	87 bb       	out	0x17, r24	; 23
 1f0:	8d b1       	in	r24, 0x0d	; 13
 1f2:	80 65       	ori	r24, 0x50	; 80
 1f4:	8d b9       	out	0x0d, r24	; 13
 1f6:	08 95       	ret

000001f8 <SPI_SendByte>:
}

void SPI_SendByte(Uint8t data)
{
	SPDR = data;
 1f8:	8f b9       	out	0x0f, r24	; 15
	while(CLR_BIT(SPSR,SPIF));
 1fa:	8e b1       	in	r24, 0x0e	; 14
 1fc:	8f 77       	andi	r24, 0x7F	; 127
 1fe:	8e b9       	out	0x0e, r24	; 14
 200:	81 11       	cpse	r24, r1
 202:	fb cf       	rjmp	.-10     	; 0x1fa <SPI_SendByte+0x2>
}
 204:	08 95       	ret

00000206 <TIMER0_STOP>:
	#if TIMER0_PRESCALAR == CLK_1024
	SET_BIT(TCCR0, CS02); CLR_BIT(TCCR0, CS01); SET_BIT(TCCR0, CS00);
    #endif
}
void TIMER0_STOP(void)
{
 206:	08 95       	ret

00000208 <UART_INIT>:
void UART_Transmit(Uint8t Data)
{
	
	//DIO_SetPin_Value(DIO_PORTD,DIO_PIN1,DIO_PIN_LOW);
	while( !( UCSRA & (1<<UDRE)));         //transmit buffer (UDR) is ready to receive new data. If UDRE is one
	UDR = Data;
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	89 b9       	out	0x09, r24	; 9
 20c:	10 bc       	out	0x20, r1	; 32
 20e:	53 9a       	sbi	0x0a, 3	; 10
 210:	54 9a       	sbi	0x0a, 4	; 10
 212:	80 b5       	in	r24, 0x20	; 32
 214:	80 68       	ori	r24, 0x80	; 128
 216:	80 bd       	out	0x20, r24	; 32
 218:	80 b5       	in	r24, 0x20	; 32
 21a:	82 60       	ori	r24, 0x02	; 2
 21c:	80 bd       	out	0x20, r24	; 32
 21e:	80 b5       	in	r24, 0x20	; 32
 220:	84 60       	ori	r24, 0x04	; 4
 222:	80 bd       	out	0x20, r24	; 32
 224:	52 98       	cbi	0x0a, 2	; 10
 226:	80 b5       	in	r24, 0x20	; 32
 228:	8f 7e       	andi	r24, 0xEF	; 239
 22a:	80 bd       	out	0x20, r24	; 32
 22c:	80 b5       	in	r24, 0x20	; 32
 22e:	8f 7d       	andi	r24, 0xDF	; 223
 230:	80 bd       	out	0x20, r24	; 32
 232:	80 b5       	in	r24, 0x20	; 32
 234:	8f 7b       	andi	r24, 0xBF	; 191
 236:	80 bd       	out	0x20, r24	; 32
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	83 e0       	ldi	r24, 0x03	; 3
 23e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 24c:	88 98       	cbi	0x11, 0	; 17
 24e:	89 9a       	sbi	0x11, 1	; 17
 250:	08 95       	ret

00000252 <UART_Receive_Byte>:
	//while(GET_BIT(UCSRA, TXC) !=1);     //Pooling mode	
}
Uint8t UART_Receive_Byte(void)
{
	// Wait for byte to be received
	while(!(UCSRA & (1<<RXC)) );
 252:	5f 9b       	sbis	0x0b, 7	; 11
 254:	fe cf       	rjmp	.-4      	; 0x252 <UART_Receive_Byte>
	// Return received data
	return UDR;
 256:	8c b1       	in	r24, 0x0c	; 12
}
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
